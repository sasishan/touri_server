using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Microsoft.AspNet.SignalR;
using Touri_Server.Models;
using System.Threading.Tasks;

namespace Touri_Server.Hubs
{
    
    public class ChatHub : Hub
    {
        private NativusDBEntities db = new NativusDBEntities();


        public override Task OnConnected()
        {
            var username = Context.QueryString["username"];
            var targetUsername = Context.QueryString["targetUserName"];
            Random r = new Random();

            //add the user to the connected DB
            Connection c = new Connection();

            //If the user is not logged in, then create a traveller id for them
            if (username.Equals(""))
            {                
                username = "Traveller_" + r.Next();
                int count = (from connects in db.Connections
                            where (connects.username == username)
                            select connects).Count();

                //find a username that does not exist in the Connection table
                int tries = 0;
                while (count!=0 && tries<5)
                {
                    username = "Traveller_" + r.Next();

                    count = (from connects in db.Connections
                                 where (connects.username == username)
                                 select connects).Count();
                    tries++;
                }
            }

            //create a group chat using their username
            Groups.Add(Context.ConnectionId, username);

            c.username = username;
            c.connectionId = Context.ConnectionId;
            c.lastConnected = DateTime.Now;
            
            db.Connections.Add(c);
                                   
            db.SaveChanges();
         
            return base.OnConnected();
        }

        public override Task OnDisconnected(bool stopCalled)
        {                        
            Connection c = db.Connections.Find(Context.ConnectionId);

            if (c!=null)
            {
                db.Connections.Remove(c);
                db.SaveChanges();
            }

            return base.OnDisconnected(stopCalled);
        }

        public override Task OnReconnected()
        {
            // Add your own code here.
            // For example: in a chat application, you might have marked the
            // user as offline after a period of inactivity; in that case 
            // mark the user as online again.
            return base.OnReconnected();
        }

        //For anonymous users this gives them their username generated by the chat hub
        //klugy - @todo make them log in
        public void SendMyUserName()
        {
            var connection = (from cons in db.Connections
                            where cons.connectionId == Context.ConnectionId
                            select cons);
            if (connection == null)
            {
                Clients.Caller.ReceiveMyUserName("");
            }
            else
            {
                Connection c = connection.First<Connection>();
            //    Clients.All.messageReceived("Pla", "Ba");
                //Clients.Group(c.username).messageReceived("Pla", "Ba");
                Clients.Group(c.username).receiveMyUserName(c.username);
            }
        }

        public void SendPrivateMessage(string message, string fromUsername, string targetUsername)
        {
           // int tgtId = Convert.ToInt32(targetId);
         //   GuideProfile gp = db.GuideProfiles.Find(tgtId);

            var connection = (from cons in db.Connections
                              where cons.username == targetUsername
                              select cons);
            
            if (connection==null)
            {
                Clients.Group(fromUsername).messageReceived(fromUsername, "Message not delivered. This user is not online");
                //Clients.All.messageReceived(fromUsername, "Message not delivered. This user is not online");
                return;
            }
            else
            {
                //Connection c = connection.First<Connection>();
                Clients.Group(targetUsername).messageReceived(fromUsername, message);
            }

            //Clients.All.messageReceived(platform, message);
            //Clients.All.addNewMessageToPage(platform, message);
        }

        public void Send(string platform, string message)
        {
            
            Clients.All.messageReceived(platform, message);
            //Clients.All.addNewMessageToPage(platform, message);
        }
    }
}